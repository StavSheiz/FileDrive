[{"C:\\GitProjects\\FileDrive\\file-drive-client\\src\\index.tsx":"1","C:\\GitProjects\\FileDrive\\file-drive-client\\src\\reportWebVitals.ts":"2","C:\\GitProjects\\FileDrive\\file-drive-client\\src\\App.tsx":"3","C:\\GitProjects\\FileDrive\\file-drive-client\\src\\login\\api\\login-api.ts":"4","C:\\GitProjects\\FileDrive\\file-drive-client\\src\\appConfig.ts":"5","C:\\GitProjects\\FileDrive\\file-drive-client\\src\\utils\\api\\axios-request.ts":"6","C:\\GitProjects\\FileDrive\\file-drive-client\\src\\enums\\ENUMExceptionCodes.ts":"7","C:\\GitProjects\\FileDrive\\file-drive-client\\src\\utils\\log\\logger.ts":"8","C:\\GitProjects\\FileDrive\\file-drive-client\\src\\login\\components\\Login.tsx":"9","C:\\GitProjects\\FileDrive\\file-drive-client\\src\\login\\logic\\login-logic.ts":"10","C:\\GitProjects\\FileDrive\\file-drive-client\\src\\login\\logic\\login-error-messages.ts":"11","C:\\GitProjects\\FileDrive\\file-drive-client\\src\\consts\\base-error-messages.ts":"12","C:\\GitProjects\\FileDrive\\file-drive-client\\src\\login\\components\\SignUp.tsx":"13"},{"size":500,"mtime":499162500000,"results":"14","hashOfConfig":"15"},{"size":425,"mtime":499162500000,"results":"16","hashOfConfig":"15"},{"size":287,"mtime":1609769648922,"results":"17","hashOfConfig":"15"},{"size":1305,"mtime":1609776339145,"results":"18","hashOfConfig":"15"},{"size":68,"mtime":1609342560996,"results":"19","hashOfConfig":"15"},{"size":2207,"mtime":1609775065398,"results":"20","hashOfConfig":"15"},{"size":174,"mtime":1609769109843,"results":"21","hashOfConfig":"15"},{"size":415,"mtime":1609341505515,"results":"22","hashOfConfig":"15"},{"size":8856,"mtime":1609765275568,"results":"23","hashOfConfig":"15"},{"size":2829,"mtime":1609769271918,"results":"24","hashOfConfig":"15"},{"size":608,"mtime":1609769159395,"results":"25","hashOfConfig":"15"},{"size":314,"mtime":1609765663209,"results":"26","hashOfConfig":"15"},{"size":11083,"mtime":1609769482010,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"146mvbs",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\GitProjects\\FileDrive\\file-drive-client\\src\\index.tsx",[],["57","58"],"C:\\GitProjects\\FileDrive\\file-drive-client\\src\\reportWebVitals.ts",[],"C:\\GitProjects\\FileDrive\\file-drive-client\\src\\App.tsx",["59","60"],"import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Login from './login/components/Login'\nimport SignUp from './login/components/SignUp';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Login></Login>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\GitProjects\\FileDrive\\file-drive-client\\src\\login\\api\\login-api.ts",["61"],"C:\\GitProjects\\FileDrive\\file-drive-client\\src\\appConfig.ts",[],"C:\\GitProjects\\FileDrive\\file-drive-client\\src\\utils\\api\\axios-request.ts",[],"C:\\GitProjects\\FileDrive\\file-drive-client\\src\\enums\\ENUMExceptionCodes.ts",[],"C:\\GitProjects\\FileDrive\\file-drive-client\\src\\utils\\log\\logger.ts",[],"C:\\GitProjects\\FileDrive\\file-drive-client\\src\\login\\components\\Login.tsx",["62"],"import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { withStyles, Theme } from '@material-ui/core/styles';\r\nimport { ClassNameMap } from '@material-ui/core/styles/withStyles';\r\nimport { Typography, Link, InputAdornment, IconButton, OutlinedInput, InputLabel, FormControl, Button, fade } from '@material-ui/core';\r\nimport { Visibility, VisibilityOff, Clear } from '@material-ui/icons/';\r\nimport logo from '../../logo.svg'\r\nimport { LoginLogic } from '../logic/login-logic';\r\n\r\n\r\ninterface ILoginProps {\r\n    classes: ClassNameMap\r\n}\r\ninterface ILoginState {\r\n    password: string,\r\n    name: string,\r\n    showPassword: boolean,\r\n    errorMessage: string,\r\n    showErrorMessage: boolean\r\n}\r\n\r\nconst styles = (theme: Theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        overflow: 'hidden',\r\n        padding: theme.spacing(0, 3),\r\n    },\r\n    container: {\r\n        maxWidth: 400,\r\n        margin: `${theme.spacing(1)}px auto`,\r\n    },\r\n    loginPaper: {\r\n        padding: theme.spacing(4),\r\n    },\r\n    newAccountPaper: {\r\n        padding: theme.spacing(2),\r\n    },\r\n    signInButton: {\r\n        backgroundColor: '#2c974b',\r\n        color: '#ffffff',\r\n        width: '100%'\r\n    },\r\n    logo: {\r\n        height: 48,\r\n        width: 48,\r\n        color: '#586069'\r\n    },\r\n    errorPaper: {\r\n        backgroundColor: fade('#cb2431', 0.5),\r\n        padding: theme.spacing(1),\r\n    }\r\n});\r\n\r\nclass Login extends React.Component<ILoginProps, ILoginState> {\r\n    state: ILoginState = {\r\n        password: '',\r\n        name: '',\r\n        showPassword: false,\r\n        errorMessage: '',\r\n        showErrorMessage: false\r\n    }\r\n\r\n    handleClickShowPassword = () => {\r\n        this.setState({ ...this.state, showPassword: !this.state.showPassword });\r\n    };\r\n\r\n    handleMouseDownPassword = (event: any) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    handleChange = (prop: string) => (event: any) => {\r\n        this.setState({ ...this.state, [prop]: event.target.value });\r\n    };\r\n\r\n    handleSignIn = async () => {\r\n        const { name, password } = this.state;\r\n        const message = await LoginLogic.signIn(name, password);\r\n\r\n        if (message) {\r\n            this.setState({ ...this.state, showErrorMessage: true, errorMessage: message, password: '' });\r\n        }\r\n    }\r\n\r\n    handleClickCloseError = () => {\r\n        this.setState({ ...this.state, showErrorMessage: false, errorMessage: '' })\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        const { password, showPassword, name, showErrorMessage, errorMessage } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <div className={classes.root}>\r\n                    <Grid container direction=\"column\" spacing={3} className={classes.container}>\r\n                        <Grid item>\r\n                            <img src={logo} className={classes.logo} />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Typography variant=\"h6\">Sign in to FileDrive</Typography>\r\n\r\n                        </Grid>\r\n                        {showErrorMessage &&\r\n                            <Grid item>\r\n                                <Paper className={classes.errorPaper}>\r\n                                    <Typography variant=\"body2\" className={classes.errorText}>{errorMessage}\r\n                                        <IconButton\r\n                                            onClick={this.handleClickCloseError}\r\n                                            onMouseDown={this.handleMouseDownPassword}\r\n                                            aria-label=\"close error message\"\r\n                                            edge=\"end\"\r\n                                        >\r\n                                            <Clear />\r\n                                        </IconButton>\r\n                                    </Typography>\r\n                                </Paper>\r\n                            </Grid>\r\n                        }\r\n                        <Grid item>\r\n                            <Paper className={classes.loginPaper}>\r\n                                <Grid container direction=\"column\" spacing={3}>\r\n                                    <Grid item>\r\n                                        <Grid container wrap=\"nowrap\" direction=\"column\" spacing={2}>\r\n                                            <Grid item>\r\n                                                <FormControl fullWidth variant=\"outlined\">\r\n\r\n                                                    <InputLabel htmlFor=\"username-input\">Username</InputLabel>\r\n                                                    <OutlinedInput\r\n                                                        fullWidth\r\n                                                        onChange={this.handleChange('name')}\r\n                                                        label=\"Username\"\r\n                                                        id=\"username-input\"\r\n                                                        value={name}\r\n                                                    />\r\n                                                </FormControl>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <Grid container wrap=\"nowrap\" direction=\"column\" spacing={2}>\r\n                                            <Grid item>\r\n                                                <FormControl fullWidth variant=\"outlined\">\r\n                                                    <InputLabel htmlFor=\"password-input\">Password</InputLabel>\r\n                                                    <OutlinedInput\r\n                                                        fullWidth\r\n                                                        onChange={this.handleChange('password')}\r\n                                                        label=\"Password\"\r\n                                                        id=\"password-input\"\r\n                                                        type={showPassword ? 'text' : 'password'}\r\n                                                        value={password}\r\n                                                        endAdornment={\r\n                                                            <InputAdornment position=\"end\">\r\n                                                                <IconButton\r\n                                                                    onClick={this.handleClickShowPassword}\r\n                                                                    onMouseDown={this.handleMouseDownPassword}\r\n                                                                    aria-label=\"toggle password visibility\"\r\n                                                                    edge=\"end\"\r\n                                                                >\r\n                                                                    {showPassword ? <Visibility /> : <VisibilityOff />}\r\n                                                                </IconButton>\r\n                                                            </InputAdornment>\r\n                                                        }\r\n                                                    />\r\n                                                </FormControl>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <Button\r\n                                            className={classes.signInButton}\r\n                                            variant=\"contained\"\r\n                                            disableRipple\r\n                                            onClick={this.handleSignIn}\r\n                                        >Sign in</Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Paper className={classes.newAccountPaper}>\r\n                                <Typography variant=\"body1\">\r\n                                    New to FileDrive? <Link href=\"#\" > Create an account. </Link> {/* TODO: Redirect to create account */}\r\n                                </Typography>\r\n                            </Paper>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles, { withTheme: true })(Login);\r\n","C:\\GitProjects\\FileDrive\\file-drive-client\\src\\login\\logic\\login-logic.ts",[],"C:\\GitProjects\\FileDrive\\file-drive-client\\src\\login\\logic\\login-error-messages.ts",[],"C:\\GitProjects\\FileDrive\\file-drive-client\\src\\consts\\base-error-messages.ts",[],"C:\\GitProjects\\FileDrive\\file-drive-client\\src\\login\\components\\SignUp.tsx",["63"],{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":2,"column":8,"nodeType":"70","messageId":"71","endLine":2,"endColumn":12},{"ruleId":"68","severity":1,"message":"72","line":5,"column":8,"nodeType":"70","messageId":"71","endLine":5,"endColumn":14},{"ruleId":"68","severity":1,"message":"73","line":1,"column":10,"nodeType":"70","messageId":"71","endLine":1,"endColumn":14},{"ruleId":"74","severity":1,"message":"75","line":98,"column":29,"nodeType":"76","endLine":98,"endColumn":72},{"ruleId":"74","severity":1,"message":"75","line":103,"column":29,"nodeType":"76","endLine":103,"endColumn":72},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'SignUp' is defined but never used.","'User' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]