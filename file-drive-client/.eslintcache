[{"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/index.tsx":"1","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/reportWebVitals.ts":"2","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/App.tsx":"3","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/errors/ErrorContext.tsx":"4","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/login/logic/login-error-messages.ts":"5","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/login/logic/user-service.ts":"6","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/enums/ENUMExceptionCodes.ts":"7","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/login/components/SignUp.tsx":"8","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/login/components/Login.tsx":"9","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/components/FilesTree.tsx":"10","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/consts/base-error-messages.ts":"11","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/login/logic/login-logic.ts":"12","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/enums/ENUMModalType.ts":"13","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/api/tree-api.ts":"14","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/logic/conversion-logic.ts":"15","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/helpers/tree-helpers.ts":"16","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/components/SideTree.tsx":"17","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/components/modals/RenameEntityModal.tsx":"18","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/components/modals/EditPermissionsModal.tsx":"19","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/components/modals/DeleteEntityModal.tsx":"20","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/components/modals/DetailsModal.tsx":"21","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/components/CurrentTreeEntity.tsx":"22","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/components/contextMenu/TreeContextMenu.tsx":"23","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/login/api/login-api.ts":"24","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/appConfig.ts":"25","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/enums/ENUMUserType.ts":"26","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/enums/ENUMConverterType.ts":"27","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/enums/ENUMPermissionType.ts":"28","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/utils/api/axios-request.ts":"29","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/components/contextMenu/TreeContextMenuTrigger.tsx":"30","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/components/AddTreeEntity.tsx":"31","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/components/modals/ValidationPopUp.tsx":"32","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/logic/permissions-logic.ts":"33","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/api/permissions-api.ts":"34","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/utils/log/logger.ts":"35","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/logic/permissions-error-messages.ts":"36","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/helpers/file-helpers.ts":"37","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/config/theme.tsx":"38"},{"size":842,"mtime":1620994316738,"results":"39","hashOfConfig":"40"},{"size":425,"mtime":1609179351665,"results":"41","hashOfConfig":"40"},{"size":1297,"mtime":1621070849893,"results":"42","hashOfConfig":"40"},{"size":1872,"mtime":1617400036438,"results":"43","hashOfConfig":"40"},{"size":601,"mtime":1610705276032,"results":"44","hashOfConfig":"40"},{"size":435,"mtime":1610705276033,"results":"45","hashOfConfig":"40"},{"size":239,"mtime":1617400036437,"results":"46","hashOfConfig":"40"},{"size":11075,"mtime":1621070621128,"results":"47","hashOfConfig":"40"},{"size":8908,"mtime":1621070825786,"results":"48","hashOfConfig":"40"},{"size":6767,"mtime":1621070187697,"results":"49","hashOfConfig":"40"},{"size":309,"mtime":1610125000320,"results":"50","hashOfConfig":"40"},{"size":2754,"mtime":1617400036445,"results":"51","hashOfConfig":"40"},{"size":86,"mtime":1617400036438,"results":"52","hashOfConfig":"40"},{"size":2504,"mtime":1617400036439,"results":"53","hashOfConfig":"40"},{"size":1109,"mtime":1617466303161,"results":"54","hashOfConfig":"40"},{"size":742,"mtime":1617400036442,"results":"55","hashOfConfig":"40"},{"size":2976,"mtime":1621070448030,"results":"56","hashOfConfig":"40"},{"size":1472,"mtime":1621070444361,"results":"57","hashOfConfig":"40"},{"size":9892,"mtime":1617400036442,"results":"58","hashOfConfig":"40"},{"size":1288,"mtime":1621070445145,"results":"59","hashOfConfig":"40"},{"size":2339,"mtime":1617400036441,"results":"60","hashOfConfig":"40"},{"size":2245,"mtime":1621070300725,"results":"61","hashOfConfig":"40"},{"size":4757,"mtime":1621070447079,"results":"62","hashOfConfig":"40"},{"size":1266,"mtime":1610705276031,"results":"63","hashOfConfig":"40"},{"size":66,"mtime":1610125000319,"results":"64","hashOfConfig":"40"},{"size":50,"mtime":1610125000320,"results":"65","hashOfConfig":"40"},{"size":90,"mtime":1617466189271,"results":"66","hashOfConfig":"40"},{"size":53,"mtime":1610705276027,"results":"67","hashOfConfig":"40"},{"size":3153,"mtime":1621070480510,"results":"68","hashOfConfig":"40"},{"size":201,"mtime":1621070446162,"results":"69","hashOfConfig":"40"},{"size":1662,"mtime":1621070448944,"results":"70","hashOfConfig":"40"},{"size":822,"mtime":1617400036442,"results":"71","hashOfConfig":"40"},{"size":3173,"mtime":1610705276031,"results":"72","hashOfConfig":"40"},{"size":2185,"mtime":1610705276027,"results":"73","hashOfConfig":"40"},{"size":401,"mtime":1610125000322,"results":"74","hashOfConfig":"40"},{"size":138,"mtime":1617400036444,"results":"75","hashOfConfig":"40"},{"size":635,"mtime":1617463379887,"results":"76","hashOfConfig":"40"},{"size":600,"mtime":1620994708574,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"jkf0l2",{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"82"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"82"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"82"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"82"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"82"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"82"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"82"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/index.tsx",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/reportWebVitals.ts",[],["162","163"],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/App.tsx",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/errors/ErrorContext.tsx",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/login/logic/login-error-messages.ts",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/login/logic/user-service.ts",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/enums/ENUMExceptionCodes.ts",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/login/components/SignUp.tsx",["164"],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/login/components/Login.tsx",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/components/FilesTree.tsx",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/consts/base-error-messages.ts",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/login/logic/login-logic.ts",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/enums/ENUMModalType.ts",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/api/tree-api.ts",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/logic/conversion-logic.ts",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/helpers/tree-helpers.ts",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/components/SideTree.tsx",["165"],"import React from 'react';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { ITreeEntity } from '../interfaces/ITreeEntity';\nimport { TreeItem, TreeView } from '@material-ui/lab';\nimport { DescriptionOutlined,  FolderTwoTone } from '@material-ui/icons';\nimport { TreeContextMenuTrigger } from './contextMenu/TreeContextMenuTrigger';\nimport { IOpenModalParams } from '../interfaces/modal-interafaces';\nimport { ENUMConverterType } from '../../enums/ENUMConverterType';\nimport { Drawer } from '@material-ui/core';\n\n\n\ninterface ISideTreeProps {\n    tree: ITreeEntity[] | null,\n    openModal: (params: IOpenModalParams) => void,\n    onTreeItemClick: (entity: ITreeEntity) => void,\n    handleDuplicate: (entity: ITreeEntity) => void,\n    download: (entity: ITreeEntity) => void,\n    handleConvert: (entity: ITreeEntity, conversionType: ENUMConverterType) => void\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    drawer: {\n        backgroundColor: theme.palette.primary.main,\n        padding: 10,\n        width: 300,\n    },\n    tree: {\n        textAlign: 'left'\n    },\n    logo: {\n        margin: \"0 auto\",\n        height: 250,\n        width: 250\n    },\n    label: {\n        fontSize: theme.typography.h6.fontSize\n    }\n}));\n\nconst collect = (props: any) => {\n    return props\n}\n\nconst SideTree = (props: ISideTreeProps) => {\n    const { tree, openModal, onTreeItemClick, handleDuplicate, handleConvert, download } = props\n    const classes = useStyles()\n\n    const onClick = (treeEntity: ITreeEntity) => () => {\n        onTreeItemClick && onTreeItemClick(treeEntity)\n    }\n    const buildTree = (currentTreeEntity: ITreeEntity) => {\n        if (currentTreeEntity)\n            return (\n                <TreeContextMenuTrigger id=\"context-menu\" collect={collect} entity={currentTreeEntity} download={download} handleDuplicate={handleDuplicate} handleConvert={handleConvert} openModal={openModal}>\n                    <TreeItem\n                        nodeId={currentTreeEntity.id.toString()}\n                        label={currentTreeEntity.name}\n                        classes={{\n                            label: classes.label\n                        }}\n                        icon={currentTreeEntity.file ? <DescriptionOutlined /> : <FolderTwoTone />}\n                        onClick={onClick(currentTreeEntity)}>\n                        {\n                            currentTreeEntity.children && currentTreeEntity.children.map(child => buildTree(child))\n                        }\n                    </TreeItem>\n                </TreeContextMenuTrigger>\n            )\n    }\n\n    return (\n        <Drawer variant=\"permanent\" classes={{paper: classes.drawer}}>\n        <img className={classes.logo} src={\"logo_transparent.png\"}/>\n        <TreeView classes={{ root: classes.tree }}>\n            {\n                tree?.map(child => buildTree(child))\n            }\n        </TreeView>\n        </Drawer>\n    )\n}\n\nexport default SideTree;\n","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/components/modals/RenameEntityModal.tsx",["166"],"import { TextField } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { renameEntity } from \"../../api/tree-a\\pi\";\nimport { ITreeEntity } from \"../../interfaces/ITreeEntity\";\nimport { IBaseModalProps } from \"../../interfaces/modal-interafaces\";\nimport ValidationPopUp from './ValidationPopUp'\n\nconst RenameEntityModal = (props: IBaseModalProps) => {\n    const { closeModal, entity, setTree } = props;\n    const [newName, setNewName] = useState(\"\")\n\n    const renameEntityInTree = (treeLevel: ITreeEntity[], entityId: number, newName: string) => {\n        const entityToRename = treeLevel.find(entity => entity.id === entityId)\n\n        if (entityToRename){            \n            entityToRename.name = newName\n            return\n        } else {\n            treeLevel.forEach(treeEntity => \n                renameEntityInTree(treeEntity.children, entityId, newName))\n            return\n        }\n    }\n\n    const onRename = () => {\n        renameEntity(newName, (entity as ITreeEntity).id)\n        setTree && setTree((prev: ITreeEntity[] | null) => {\n            renameEntityInTree(prev as ITreeEntity[], (entity as ITreeEntity).id, newName)\n            return prev as ITreeEntity[]\n        })\n        closeModal()\n    }\n\n    return <ValidationPopUp onClose={closeModal} onClick={onRename}>\n        <TextField name=\"New name\" label=\"New Name\" onChange={e => setNewName(e.target.value)}/>\n    </ValidationPopUp>\n}\n\nexport default RenameEntityModal","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/components/modals/EditPermissionsModal.tsx",["167","168","169"],"import React from 'react';\nimport { Theme, withStyles, TableContainer, Table, TableHead, TableRow, TableCell, Paper, TableBody, IconButton, Select, MenuItem, Typography } from \"@material-ui/core\";\nimport { IBaseModalProps } from '../../interfaces/modal-interafaces';\nimport { ClassNameMap } from '@material-ui/core/styles/withStyles';\nimport { ITreeEntity } from '../../interfaces/ITreeEntity';\nimport { PermissionsLogic } from '../../logic/permissions-logic';\nimport { Permission } from '../../../models/Permission';\nimport { ENUMPermissionType } from '../../../enums/ENUMPermissionType';\nimport { Delete, Edit, Add, Clear } from '@material-ui/icons';\nimport { User } from '../../../models/User';\nimport { ENUMUserType } from '../../../enums/ENUMUserType';\nimport { UserService } from '../../../login/logic/user-service';\n\n\ninterface IEditPermissionsModalProps extends IBaseModalProps {\n    classes: ClassNameMap,\n}\ninterface IEditPermissionsModalState {\n    permissions: Permission[],\n    users: User[],\n    errorMessage: string,\n    selectedUser: User | null,\n    selectedPermissionType: ENUMPermissionType,\n    showErrorMessage: boolean\n}\n\nconst styles = (theme: Theme) => ({\n    paper: {\n        width: 400,\n        backgroundColor: theme.palette.background.paper,\n        border: '2px solid #000',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2, 4, 3),\n    },\n    errorPaper: {\n        backgroundColor: '#cb2431',\n        padding: theme.spacing(1),\n    }\n});\n\nclass EditPermissionsModal extends React.Component<IEditPermissionsModalProps, IEditPermissionsModalState> {\n    state: IEditPermissionsModalState = {\n        permissions: [],\n        users: [],\n        errorMessage: \"\",\n        selectedUser: { id: -1, name: '', userType: ENUMUserType.Normal },\n        selectedPermissionType: ENUMPermissionType.View,\n        showErrorMessage: false\n    }\n\n    getModalStyle = () => {\n\n        return {\n            top: `30%`,\n            left: `50%`,\n            transform: `translate(-50%, -50%)`,\n        };\n    }\n\n    getPermissions = async () => {\n        if (this.props.entity) {\n            const response = await PermissionsLogic.getPermissions(this.props.entity);\n\n            if (response.message) {\n                this.setState({ errorMessage: response.message, showErrorMessage: true });\n            } else if (response.data) {\n                this.setState({ permissions: response.data })\n                this.setState({ users: this.state.users.filter(this.userExistsInPermissions(response.data)) })\n            }\n        }\n    }\n\n    getUsers = async () => {\n        const response = await PermissionsLogic.getUsers();\n\n        if (response.message) {\n            this.setState({ errorMessage: response.message, showErrorMessage: true });\n        } else if (response.data) {\n            this.setState({ users: response.data.filter(this.userExistsInPermissions(this.state.permissions)) })\n        }\n    }\n\n    userExistsInPermissions = (permissions: Permission[]) => (user: User) => {\n        return (!permissions || permissions.findIndex(permission => permission.user.id === user.id) < 0)\n            && user.id !== UserService.getCurrentUser()?.id\n    }\n\n    permissionTypeText = {\n        [ENUMPermissionType.Edit]: 'Edit',\n        [ENUMPermissionType.View]: 'View'\n    }\n\n    componentDidMount() {\n        this.getPermissions();\n        this.getUsers();\n    }\n\n    handleUserChange = (event: any) => {\n        const user = this.state.users.find(user => user.id === event.target.value) || null;\n        this.setState({ selectedUser: user })\n    }\n    handlePermChange = (event: any) => {\n        this.setState({ selectedPermissionType: event.target.value })\n    }\n\n    handleDelete = (permission: Permission) => async (event: any) => {\n        const message = await PermissionsLogic.DeletePermission(permission)\n\n        if (message) {\n            this.setState({ errorMessage: message, showErrorMessage: true });\n        } else {\n            this.getPermissions();\n        }\n    }\n\n    handleEdit = (permission: Permission) => async (event: any) => {\n        const message = await PermissionsLogic.EditPermission(permission)\n\n        if (message) {\n            this.setState({ errorMessage: message, showErrorMessage: true });\n        } else {\n            this.getPermissions();\n        }\n    }\n\n    handleAdd = async (event: any) => {\n        if (this.props.entity && this.state.selectedUser && this.state.selectedUser.id != -1) {\n            const message = await PermissionsLogic.AddPermission(this.state.selectedUser, this.props.entity, this.state.selectedPermissionType);\n\n            if (message) {\n                this.setState({ errorMessage: message, showErrorMessage: true });\n            } else {\n                this.getPermissions();\n            }\n        }\n    }\n\n    handleClickCloseError = () => {\n        this.setState({ ...this.state, showErrorMessage: false, errorMessage: '' })\n    }\n\n    render() {\n        const { entity, classes } = this.props;\n        const { permissions, selectedUser, selectedPermissionType, users, showErrorMessage, errorMessage } = this.state;\n\n        return (\n            <div style={{ ...(this.getModalStyle()), position: 'absolute' }}>\n                {showErrorMessage &&\n                    <Paper className={classes.errorPaper}>\n                        <Typography variant=\"body2\" className={classes.errorText}>{errorMessage}\n                            <IconButton\n                                onClick={this.handleClickCloseError}\n                                aria-label=\"close error message\"\n                                edge=\"end\"\n                            >\n                                <Clear />\n                            </IconButton>\n                        </Typography>\n                    </Paper>\n                }\n                <TableContainer component={Paper}>\n                    <Table className={classes.table} aria-label=\"simple table\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Username</TableCell>\n                                <TableCell >Permission</TableCell>\n                                <TableCell >Delete</TableCell>\n                                <TableCell >Toggle Edit/View</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {permissions && permissions.map((row) => (\n                                <TableRow key={row.id}>\n                                    <TableCell component=\"th\" scope=\"row\">\n                                        {row.user.name}\n                                    </TableCell>\n                                    <TableCell >{this.permissionTypeText[row.permissionType]}</TableCell>\n                                    <TableCell >\n                                        <IconButton color=\"primary\" aria-label=\"delete\" component=\"span\">\n                                            <Delete onClick={this.handleDelete(row)} />\n                                        </IconButton>\n                                    </TableCell>\n                                    <TableCell >\n                                        <IconButton color=\"primary\" aria-label=\"edit\" component=\"span\">\n                                            <Edit onClick={this.handleEdit(row)} />\n                                        </IconButton>\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                            {selectedUser && <TableRow>\n                                <TableCell>\n                                    <Select\n                                        labelId=\"userselect\"\n                                        id=\"userselect\"\n                                        value={selectedUser.id}\n                                        onChange={this.handleUserChange}\n                                    >\n                                        {users && users.map(user => (\n                                            <MenuItem value={user.id}>\n                                                <em>{user.name}</em>\n                                            </MenuItem>\n                                        ))}\n                                    </Select>\n                                </TableCell>\n                                <TableCell>\n                                    <Select labelId=\"permselect\"\n                                        id=\"permselect\"\n                                        value={selectedPermissionType}\n                                        onChange={this.handlePermChange}>\n                                        <MenuItem value={ENUMPermissionType.View}>\n                                            {this.permissionTypeText[ENUMPermissionType.View]}\n                                        </MenuItem>\n                                        <MenuItem value={ENUMPermissionType.Edit}>\n                                            {this.permissionTypeText[ENUMPermissionType.Edit]}\n                                        </MenuItem>\n                                    </Select>\n                                </TableCell>\n                                <TableCell>\n                                    <IconButton color=\"primary\" aria-label=\"add\" component=\"span\">\n                                        <Add onClick={this.handleAdd} />\n                                    </IconButton>\n                                </TableCell>\n                            </TableRow>\n                            }\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </ div>\n        )\n    }\n}\n\nexport default withStyles(styles, { withTheme: true })(EditPermissionsModal)\n","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/components/modals/DeleteEntityModal.tsx",["170"],"import React from \"react\";\nimport { deleteTreeEntity } from \"../../api/tree-api\";\nimport { ITreeEntity } from \"../../interfaces/ITreeEntity\";\nimport { IBaseModalProps } from \"../../interfaces/modal-interafaces\";\nimport ValidationPopUp from './ValidationPopUp'\n\nconst DeleteEntityModal = (props: IBaseModalProps) => {\n    const { closeModal, entity, setTree } = props;\n    const deleteEntityInTree = (treeLevel: ITreeEntity[], entityId: number) => {\n        const filteredLevel = treeLevel.filter(entity => entity.id != entityId)\n\n        if (filteredLevel.length !== treeLevel.length){            \n            return filteredLevel\n        } else {\n            treeLevel.forEach(treeEntity => \n                treeEntity.children = deleteEntityInTree(treeEntity.children, entityId))\n            return treeLevel\n        }\n    }\n    const onDelete = () => {\n        const entityIdToDelete = (entity as ITreeEntity).id\n        deleteTreeEntity(entityIdToDelete)\n        setTree && setTree((prev: ITreeEntity[] | null) => {\n            deleteEntityInTree(prev as ITreeEntity[], (entity as ITreeEntity).id)\n            return prev as ITreeEntity[]\n        })\n        closeModal()\n    }\n    return <ValidationPopUp onClose={closeModal} onClick={onDelete} />\n}\n\nexport default DeleteEntityModal","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/components/modals/DetailsModal.tsx",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/components/CurrentTreeEntity.tsx",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/components/contextMenu/TreeContextMenu.tsx",["171","172","173"],"import { ContextMenu, MenuItem, connectMenu, ConnectMenuProps } from \"react-contextmenu\";\nimport React from 'react';\nimport { Theme, withStyles } from \"@material-ui/core\";\nimport { UserService } from \"../../../login/logic/user-service\";\nimport { ENUMModalType } from '../../../enums/ENUMModalType';\nimport { IOpenModalParams } from \"../../interfaces/modal-interafaces\";\nimport './cotext.css'\nimport { ITreeEntity } from \"../../interfaces/ITreeEntity\";\nimport { duplicateFile } from \"../../api/tree-api\";\nimport { ConversionLogic } from \"../../logic/conversion-logic\";\nimport { ENUMConverterType } from \"../../../enums/ENUMConverterType\";\n\ninterface ITreeContextMenuState { }\n\nconst styles = (theme: Theme) => ({\n\n});\n\n\nclass ConnectedMenu extends React.Component<ConnectMenuProps, ITreeContextMenuState> {\n    handleClick = (event: any, data: IOpenModalParams) => {\n        this.props.trigger.openModal(data);\n    }\n\n    handleDuplicate = (event: any, data: { entity: ITreeEntity }) => {\n        this.props.trigger.handleDuplicate(data.entity);\n    }\n\n    handleDownload = (event: any, data: {entity: ITreeEntity}) => {\n        this.props.trigger.download(data.entity)\n    }\n\n    convertFile = (event: any, data: { entity: ITreeEntity, conversionType: ENUMConverterType }) => {\n        this.props.trigger.handleConvert(data.entity, data.conversionType);\n    }\n\n    canConvert = (conversionType: ENUMConverterType, fileName: string) => {\n        const conversionTypes = ConversionLogic.getAvailableConversionTypes(fileName);\n\n        return conversionTypes.indexOf(conversionType) !== -1;\n    }\n\n    render() {\n        const { trigger } = this.props;\n        const user = UserService.getCurrentUser();\n\n        return (\n            <ContextMenu id=\"context-menu\">\n                {trigger && user && trigger.entity?.owner?.id === user.id &&\n                <>\n                    < MenuItem data={{ entity: trigger.entity, modalType: ENUMModalType.EditPermissions }} onClick={this.handleClick}>\n                        Edit Permissions\n                    </MenuItem>\n                    < MenuItem data={{ entity: trigger.entity, modalType: ENUMModalType.Delete }} onClick={this.handleClick}>\n                    Delete\n                </MenuItem>\n                < MenuItem data={{ entity: trigger.entity, modalType: ENUMModalType.Rename }} onClick={this.handleClick}>\n                    Rename\n                </MenuItem>\n                </>\n                }\n                {trigger && trigger.entity &&\n                    < MenuItem data={{ entity: trigger.entity, modalType: ENUMModalType.Details }} onClick={this.handleClick}>\n                        Details\n                    </MenuItem>\n                }\n                {trigger && trigger.entity && trigger.entity.file &&\n                    < MenuItem data={{ entity: trigger.entity }} onClick={this.handleDuplicate}>\n                        Duplicate\n                    </MenuItem>\n                }\n                {trigger && trigger.entity && trigger.entity.file &&\n                    < MenuItem data={{ entity: trigger.entity }} onClick={this.handleDownload}>\n                        Download\n                    </MenuItem>\n                }\n                {trigger && trigger.entity && trigger.entity.file && this.canConvert(ENUMConverterType.JPGToPNG, trigger.entity.name) &&\n                    < MenuItem data={{ entity: trigger.entity, conversionType: ENUMConverterType.JPGToPNG }} onClick={this.convertFile}>\n                        Convert To PNG\n                    </MenuItem>\n                }\n                {trigger && trigger.entity && trigger.entity.file && this.canConvert(ENUMConverterType.PNGToJPG, trigger.entity.name) &&\n                    < MenuItem data={{ entity: trigger.entity, conversionType: ENUMConverterType.PNGToJPG }} onClick={this.convertFile}>\n                        Convert To JPG\n                    </MenuItem>\n                }\n                {trigger && trigger.entity && trigger.entity.file && this.canConvert(ENUMConverterType.WORDToPDF, trigger.entity.name) &&\n                    < MenuItem data={{ entity: trigger.entity, conversionType: ENUMConverterType.WORDToPDF }} onClick={this.convertFile}>\n                        Convert To PDF\n                    </MenuItem>\n                }\n                {trigger && trigger.entity && trigger.entity.file && this.canConvert(ENUMConverterType.PDFToWORD, trigger.entity.name) &&\n                    < MenuItem data={{ entity: trigger.entity, conversionType: ENUMConverterType.PDFToWORD }} onClick={this.convertFile}>\n                        Convert To Word\n                    </MenuItem>\n                }\n            </ContextMenu>\n        )\n    }\n}\n\nconst TreeContextMenu = connectMenu(\"context-menu\")(ConnectedMenu);\n\n\nexport default TreeContextMenu\n","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/login/api/login-api.ts",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/appConfig.ts",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/enums/ENUMUserType.ts",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/enums/ENUMConverterType.ts",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/enums/ENUMPermissionType.ts",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/utils/api/axios-request.ts",["174","175"],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/components/contextMenu/TreeContextMenuTrigger.tsx",["176"],"import TreeContextMenu from \"./TreeContextMenu\";\nimport { ContextMenuTrigger } from \"react-contextmenu\";\nimport React from 'react';\n\n\nexport const TreeContextMenuTrigger = (props: any) => {\n    return React.createElement(ContextMenuTrigger, props)\n} ","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/components/AddTreeEntity.tsx",["177"],"import { Card, IconButton, TextField, Typography } from '@material-ui/core'\nimport { AttachFile, CreateNewFolder } from '@material-ui/icons'\nimport React, { useState } from 'react'\ninterface IAddTreeEntityProps {\n    onAddFile: (file: File) => void,\n    onAddFolder: (folderName: string) => void\n}\n\nconst AddTreeEntity = (props: IAddTreeEntityProps) => {\n    const { onAddFile, onAddFolder } = props\n\n    const [isAddFolderMode, setIsAddFolderMode] = useState<boolean>(false)\n\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files && e.target.files[0]) {\n            onAddFile(e.target.files[0])\n        }\n    }\n\n    const onTextFieldBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n        onAddFolder && onAddFolder(e.target.value)\n        setIsAddFolderMode(false)\n    }\n    return (<div>\n        {\n            isAddFolderMode ?\n                <TextField onBlur={onTextFieldBlur} />\n                :\n                <>\n                    <Typography variant={\"subtitle2\"}>\n                        {\"Create a folder/Upload a file:\"}\n                    </Typography>\n                    <IconButton onClick={() => setIsAddFolderMode(true)}>\n                        <CreateNewFolder />\n                    </IconButton>\n                    <input id=\"icon-button-file\" type=\"file\" hidden onChange={handleInputChange} />\n                    <label htmlFor=\"icon-button-file\">\n                        <IconButton component=\"span\">\n                            <AttachFile />\n                        </IconButton>\n                    </label>\n                </>\n        }\n    </div>)\n}\n\nexport default AddTreeEntity","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/components/modals/ValidationPopUp.tsx",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/logic/permissions-logic.ts",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/api/permissions-api.ts",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/utils/log/logger.ts",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/logic/permissions-error-messages.ts",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/helpers/file-helpers.ts",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/config/theme.tsx",[],{"ruleId":"178","replacedBy":"179"},{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","severity":1,"message":"183","line":8,"column":8,"nodeType":"184","messageId":"185","endLine":8,"endColumn":12},{"ruleId":"186","severity":1,"message":"187","line":74,"column":9,"nodeType":"188","endLine":74,"endColumn":69},{"ruleId":"189","severity":1,"message":"190","line":3,"column":47,"nodeType":"191","messageId":"192","endLine":3,"endColumn":48,"suggestions":"193"},{"ruleId":"182","severity":1,"message":"194","line":5,"column":10,"nodeType":"184","messageId":"185","endLine":5,"endColumn":21},{"ruleId":"195","severity":1,"message":"196","line":127,"column":88,"nodeType":"197","messageId":"198","endLine":127,"endColumn":90},{"ruleId":"182","severity":1,"message":"199","line":143,"column":17,"nodeType":"184","messageId":"185","endLine":143,"endColumn":23},{"ruleId":"195","severity":1,"message":"196","line":10,"column":68,"nodeType":"197","messageId":"198","endLine":10,"endColumn":70},{"ruleId":"182","severity":1,"message":"200","line":3,"column":17,"nodeType":"184","messageId":"185","endLine":3,"endColumn":27},{"ruleId":"182","severity":1,"message":"201","line":9,"column":10,"nodeType":"184","messageId":"185","endLine":9,"endColumn":23},{"ruleId":"182","severity":1,"message":"202","line":15,"column":7,"nodeType":"184","messageId":"185","endLine":15,"endColumn":13},{"ruleId":"182","severity":1,"message":"203","line":61,"column":32,"nodeType":"184","messageId":"185","endLine":61,"endColumn":42},{"ruleId":"182","severity":1,"message":"204","line":61,"column":44,"nodeType":"184","messageId":"185","endLine":61,"endColumn":49},{"ruleId":"182","severity":1,"message":"205","line":1,"column":8,"nodeType":"184","messageId":"185","endLine":1,"endColumn":23},{"ruleId":"182","severity":1,"message":"206","line":1,"column":10,"nodeType":"184","messageId":"185","endLine":1,"endColumn":14},"no-native-reassign",["207"],"no-negated-in-lhs",["208"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-useless-escape","Unnecessary escape character: \\p.","Literal","unnecessaryEscape",["209","210"],"'ITreeEntity' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'entity' is assigned a value but never used.","'withStyles' is defined but never used.","'duplicateFile' is defined but never used.","'styles' is assigned a value but never used.","'TUrlParams' is defined but never used.","'TData' is defined but never used.","'TreeContextMenu' is defined but never used.","'Card' is defined but never used.","no-global-assign","no-unsafe-negation",{"messageId":"211","fix":"212","desc":"213"},{"messageId":"214","fix":"215","desc":"216"},"removeEscape",{"range":"217","text":"218"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"219","text":"220"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[134,135],"",[134,134],"\\"]