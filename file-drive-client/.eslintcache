[{"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/index.tsx":"1","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/reportWebVitals.ts":"2","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/App.tsx":"3","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/errors/ErrorContext.tsx":"4","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/login/logic/login-error-messages.ts":"5","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/login/logic/user-service.ts":"6","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/enums/ENUMExceptionCodes.ts":"7","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/login/components/SignUp.tsx":"8","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/login/components/Login.tsx":"9","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/components/FilesTree.tsx":"10","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/consts/base-error-messages.ts":"11","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/login/logic/login-logic.ts":"12","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/enums/ENUMModalType.ts":"13","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/api/tree-api.ts":"14","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/logic/conversion-logic.ts":"15","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/helpers/tree-helpers.ts":"16","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/components/SideTree.tsx":"17","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/components/modals/RenameEntityModal.tsx":"18","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/components/modals/EditPermissionsModal.tsx":"19","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/components/modals/DeleteEntityModal.tsx":"20","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/components/modals/DetailsModal.tsx":"21","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/components/CurrentTreeEntity.tsx":"22","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/components/contextMenu/TreeContextMenu.tsx":"23","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/login/api/login-api.ts":"24","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/appConfig.ts":"25","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/enums/ENUMUserType.ts":"26","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/enums/ENUMConverterType.ts":"27","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/enums/ENUMPermissionType.ts":"28","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/utils/api/axios-request.ts":"29","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/components/contextMenu/TreeContextMenuTrigger.tsx":"30","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/components/AddTreeEntity.tsx":"31","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/components/modals/ValidationPopUp.tsx":"32","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/logic/permissions-logic.ts":"33","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/api/permissions-api.ts":"34","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/utils/log/logger.ts":"35","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/logic/permissions-error-messages.ts":"36","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/helpers/file-helpers.ts":"37"},{"size":678,"mtime":1617400036444,"results":"38","hashOfConfig":"39"},{"size":425,"mtime":1609179351665,"results":"40","hashOfConfig":"39"},{"size":1300,"mtime":1617400036437,"results":"41","hashOfConfig":"39"},{"size":1872,"mtime":1617400036438,"results":"42","hashOfConfig":"39"},{"size":601,"mtime":1610705276032,"results":"43","hashOfConfig":"39"},{"size":435,"mtime":1610705276033,"results":"44","hashOfConfig":"39"},{"size":239,"mtime":1617400036437,"results":"45","hashOfConfig":"39"},{"size":11044,"mtime":1610705276032,"results":"46","hashOfConfig":"39"},{"size":8888,"mtime":1610705276032,"results":"47","hashOfConfig":"39"},{"size":6667,"mtime":1617463410906,"results":"48","hashOfConfig":"39"},{"size":309,"mtime":1610125000320,"results":"49","hashOfConfig":"39"},{"size":2754,"mtime":1617400036445,"results":"50","hashOfConfig":"39"},{"size":86,"mtime":1617400036438,"results":"51","hashOfConfig":"39"},{"size":2504,"mtime":1617400036439,"results":"52","hashOfConfig":"39"},{"size":1110,"mtime":1617400036444,"results":"53","hashOfConfig":"39"},{"size":742,"mtime":1617400036442,"results":"54","hashOfConfig":"39"},{"size":2352,"mtime":1617462782534,"results":"55","hashOfConfig":"39"},{"size":1472,"mtime":1617400036442,"results":"56","hashOfConfig":"39"},{"size":9892,"mtime":1617400036442,"results":"57","hashOfConfig":"39"},{"size":1287,"mtime":1617400036441,"results":"58","hashOfConfig":"39"},{"size":2339,"mtime":1617400036441,"results":"59","hashOfConfig":"39"},{"size":2259,"mtime":1617462513952,"results":"60","hashOfConfig":"39"},{"size":4089,"mtime":1617462384141,"results":"61","hashOfConfig":"39"},{"size":1266,"mtime":1610705276031,"results":"62","hashOfConfig":"39"},{"size":66,"mtime":1610125000319,"results":"63","hashOfConfig":"39"},{"size":50,"mtime":1610125000320,"results":"64","hashOfConfig":"39"},{"size":60,"mtime":1617400036437,"results":"65","hashOfConfig":"39"},{"size":53,"mtime":1610705276027,"results":"66","hashOfConfig":"39"},{"size":3152,"mtime":1617400036445,"results":"67","hashOfConfig":"39"},{"size":250,"mtime":1610705276029,"results":"68","hashOfConfig":"39"},{"size":1524,"mtime":1617400036439,"results":"69","hashOfConfig":"39"},{"size":822,"mtime":1617400036442,"results":"70","hashOfConfig":"39"},{"size":3173,"mtime":1610705276031,"results":"71","hashOfConfig":"39"},{"size":2185,"mtime":1610705276027,"results":"72","hashOfConfig":"39"},{"size":401,"mtime":1610125000322,"results":"73","hashOfConfig":"39"},{"size":138,"mtime":1617400036444,"results":"74","hashOfConfig":"39"},{"size":635,"mtime":1617463379887,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"79"},"jkf0l2",{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"79"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"79"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"79"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"79"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"79"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"79"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"79"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"79"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"79"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/index.tsx",["161"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ErrorContextProvider } from './errors/ErrorContext';\nimport { UserService } from './login/logic/user-service';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <ErrorContextProvider>\n      <App />\n    </ErrorContextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["162","163"],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/reportWebVitals.ts",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/App.tsx",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/errors/ErrorContext.tsx",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/login/logic/login-error-messages.ts",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/login/logic/user-service.ts",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/enums/ENUMExceptionCodes.ts",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/login/components/SignUp.tsx",["164"],"import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport { withStyles, Theme } from '@material-ui/core/styles';\nimport { ClassNameMap } from '@material-ui/core/styles/withStyles';\nimport { Typography, InputAdornment, IconButton, OutlinedInput, InputLabel, FormControl, Button, fade } from '@material-ui/core';\nimport { Visibility, VisibilityOff, Clear } from '@material-ui/icons/';\nimport logo from '../../logo.svg'\nimport { LoginLogic } from '../logic/login-logic';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\n\n\n\ntype ISignUpProps = RouteComponentProps & {\n    classes: ClassNameMap,\n    history: any\n}\ninterface ISignUpState {\n    password: string,\n    confirmPassword: string,\n    name: string,\n    showPassword: boolean,\n    showConfirmPassword: boolean,\n    errorMessage: string,\n    showErrorMessage: boolean\n}\n\nconst styles = (theme: Theme) => ({\n    root: {\n        flexGrow: 1,\n        overflow: 'hidden',\n        padding: theme.spacing(0, 3),\n    },\n    container: {\n        maxWidth: 400,\n        margin: `${theme.spacing(1)}px auto`,\n    },\n    loginPaper: {\n        padding: theme.spacing(4),\n    },\n    newAccountPaper: {\n        padding: theme.spacing(2),\n    },\n    signUpButton: {\n        backgroundColor: '#2c974b',\n        color: '#ffffff',\n        width: '100%'\n    },\n    logo: {\n        height: 48,\n        width: 48,\n        color: '#586069'\n    },\n    errorPaper: {\n        backgroundColor: fade('#cb2431', 0.5),\n        padding: theme.spacing(1),\n    }\n});\n\nclass SignUp extends React.Component<ISignUpProps, ISignUpState> {\n    state: ISignUpState = {\n        password: '',\n        confirmPassword: '',\n        name: '',\n        showPassword: false,\n        showConfirmPassword: false,\n        errorMessage: '',\n        showErrorMessage: false\n    }\n\n    handleClickShowPassword = (prop: 'showPassword' | 'showConfirmPassword') => () => {\n        this.setState({ ...this.state, [prop]: !this.state[prop] });\n    };\n\n    handleMouseDownPassword = (event: any) => {\n        event.preventDefault();\n    };\n\n    handleChange = (prop: string) => (event: any) => {\n        this.setState({ ...this.state, [prop]: event.target.value });\n    };\n\n    handleSignUp = async () => {\n        const { name, password, confirmPassword } = this.state;\n\n        const message = await LoginLogic.signUp(name, password, confirmPassword);\n\n        if (message) {\n            this.setState({ ...this.state, showErrorMessage: true, errorMessage: message, password: '', confirmPassword: '' });\n        } else {\n            this.props.history.push('/login');\n        }\n    }\n\n    handleClickCloseError = () => {\n        this.setState({ ...this.state, showErrorMessage: false, errorMessage: '' })\n    }\n\n    render() {\n        const { classes } = this.props;\n        const { password, confirmPassword, showPassword, showConfirmPassword, name, showErrorMessage, errorMessage } = this.state;\n\n        return (\n            <div>\n                <div className={classes.root}>\n                    <Grid container direction=\"column\" spacing={3} className={classes.container}>\n                        <Grid item>\n                            <img src={logo} className={classes.logo} />\n                        </Grid>\n                        <Grid item>\n                            <Typography variant=\"h6\">Sign Up to FileDrive</Typography>\n\n                        </Grid>\n                        {showErrorMessage &&\n                            <Grid item>\n                                <Paper className={classes.errorPaper}>\n                                    <Typography variant=\"body2\" className={classes.errorText}>{errorMessage}\n                                        <IconButton\n                                            onClick={this.handleClickCloseError}\n                                            onMouseDown={this.handleMouseDownPassword}\n                                            aria-label=\"close error message\"\n                                            edge=\"end\"\n                                        >\n                                            <Clear />\n                                        </IconButton>\n                                    </Typography>\n                                </Paper>\n                            </Grid>\n                        }\n                        <Grid item>\n                            <Paper className={classes.loginPaper}>\n                                <Grid container direction=\"column\" spacing={3}>\n                                    <Grid item>\n                                        <Grid container wrap=\"nowrap\" direction=\"column\" spacing={2}>\n                                            <Grid item>\n                                                <FormControl fullWidth variant=\"outlined\">\n\n                                                    <InputLabel htmlFor=\"username-input\">Username</InputLabel>\n                                                    <OutlinedInput\n                                                        fullWidth\n                                                        onChange={this.handleChange('name')}\n                                                        label=\"Username\"\n                                                        id=\"username-input\"\n                                                        value={name}\n                                                    />\n                                                </FormControl>\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                    <Grid item>\n                                        <Grid container wrap=\"nowrap\" direction=\"column\" spacing={2}>\n                                            <Grid item>\n                                                <FormControl fullWidth variant=\"outlined\">\n                                                    <InputLabel htmlFor=\"password-input\">Password</InputLabel>\n                                                    <OutlinedInput\n                                                        fullWidth\n                                                        onChange={this.handleChange('password')}\n                                                        label=\"Password\"\n                                                        id=\"password-input\"\n                                                        type={showPassword ? 'text' : 'password'}\n                                                        value={password}\n                                                        endAdornment={\n                                                            <InputAdornment position=\"end\">\n                                                                <IconButton\n                                                                    onClick={this.handleClickShowPassword('showPassword')}\n                                                                    onMouseDown={this.handleMouseDownPassword}\n                                                                    aria-label=\"toggle password visibility\"\n                                                                    edge=\"end\"\n                                                                >\n                                                                    {showPassword ? <Visibility /> : <VisibilityOff />}\n                                                                </IconButton>\n                                                            </InputAdornment>\n                                                        }\n                                                    />\n                                                </FormControl>\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                    <Grid item>\n                                        <Grid container wrap=\"nowrap\" direction=\"column\" spacing={2}>\n                                            <Grid item>\n                                                <FormControl fullWidth variant=\"outlined\">\n                                                    <InputLabel htmlFor=\"confirm-password-input\">Confrim password</InputLabel>\n                                                    <OutlinedInput\n                                                        fullWidth\n                                                        onChange={this.handleChange('confirmPassword')}\n                                                        label=\"Confirm password\"\n                                                        id=\"confirm-password-input\"\n                                                        type={showConfirmPassword ? 'text' : 'password'}\n                                                        value={confirmPassword}\n                                                        endAdornment={\n                                                            <InputAdornment position=\"end\">\n                                                                <IconButton\n                                                                    onClick={this.handleClickShowPassword('showConfirmPassword')}\n                                                                    onMouseDown={this.handleMouseDownPassword}\n                                                                    aria-label=\"toggle password visibility\"\n                                                                    edge=\"end\"\n                                                                >\n                                                                    {showConfirmPassword ? <Visibility /> : <VisibilityOff />}\n                                                                </IconButton>\n                                                            </InputAdornment>\n                                                        }\n                                                    />\n                                                </FormControl>\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                    <Grid item>\n                                        <Button\n                                            className={classes.signUpButton}\n                                            variant=\"contained\"\n                                            disableRipple\n                                            onClick={this.handleSignUp}\n                                        >Sign up</Button>\n                                    </Grid>\n                                </Grid>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(withStyles(styles, { withTheme: true })(SignUp));\n","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/login/components/Login.tsx",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/components/FilesTree.tsx",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/consts/base-error-messages.ts",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/login/logic/login-logic.ts",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/enums/ENUMModalType.ts",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/api/tree-api.ts",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/logic/conversion-logic.ts",["165","166"],"import { ConversionErrorMessage } from './conversion-error-messages';\nimport { ENUMExceptionCodes } from './../../enums/ENUMExceptionCodes';\nimport { convertFile } from './../api/tree-api';\nimport { ENUMConverterType } from './../../enums/ENUMConverterType';\n\nexport class ConversionLogic {\n    private static extensionToConversionMap: { [key: string]: ENUMConverterType[] } = {\n        'png': [ENUMConverterType.PNGToJPG],\n        'jpg': [ENUMConverterType.JPGToPNG]\n    }\n\n    public static getAvailableConversionTypes(fileName: string): ENUMConverterType[] {\n        const extension = ConversionLogic.getFileExtension(fileName)\n\n        return ConversionLogic.extensionToConversionMap[extension.toLowerCase()] || [];\n    }\n\n    public static getFileExtension(fileName: string) {\n        const splitName = fileName.split('.');\n        const extension = splitName[splitName.length - 1];\n\n        return extension;\n    }\n\n    public static async convertFile(fileId: number, conversionType: ENUMConverterType) {\n        const response = await convertFile(fileId, conversionType)\n\n        return response\n    }\n}","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/helpers/tree-helpers.ts",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/components/SideTree.tsx",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/components/modals/RenameEntityModal.tsx",["167"],"import { TextField } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { renameEntity } from \"../../api/tree-a\\pi\";\nimport { ITreeEntity } from \"../../interfaces/ITreeEntity\";\nimport { IBaseModalProps } from \"../../interfaces/modal-interafaces\";\nimport ValidationPopUp from './ValidationPopUp'\n\nconst RenameEntityModal = (props: IBaseModalProps) => {\n    const { closeModal, entity, setTree } = props;\n    const [newName, setNewName] = useState(\"\")\n\n    const renameEntityInTree = (treeLevel: ITreeEntity[], entityId: number, newName: string) => {\n        const entityToRename = treeLevel.find(entity => entity.id === entityId)\n\n        if (entityToRename){            \n            entityToRename.name = newName\n            return\n        } else {\n            treeLevel.forEach(treeEntity => \n                renameEntityInTree(treeEntity.children, entityId, newName))\n            return\n        }\n    }\n\n    const onRename = () => {\n        renameEntity(newName, (entity as ITreeEntity).id)\n        setTree && setTree((prev: ITreeEntity[] | null) => {\n            renameEntityInTree(prev as ITreeEntity[], (entity as ITreeEntity).id, newName)\n            return prev as ITreeEntity[]\n        })\n        closeModal()\n    }\n\n    return <ValidationPopUp onClose={closeModal} onClick={onRename}>\n        <TextField name=\"New name\" label=\"New Name\" onChange={e => setNewName(e.target.value)}/>\n    </ValidationPopUp>\n}\n\nexport default RenameEntityModal","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/components/modals/EditPermissionsModal.tsx",["168","169","170"],"import React from 'react';\nimport { Theme, withStyles, TableContainer, Table, TableHead, TableRow, TableCell, Paper, TableBody, IconButton, Select, MenuItem, Typography } from \"@material-ui/core\";\nimport { IBaseModalProps } from '../../interfaces/modal-interafaces';\nimport { ClassNameMap } from '@material-ui/core/styles/withStyles';\nimport { ITreeEntity } from '../../interfaces/ITreeEntity';\nimport { PermissionsLogic } from '../../logic/permissions-logic';\nimport { Permission } from '../../../models/Permission';\nimport { ENUMPermissionType } from '../../../enums/ENUMPermissionType';\nimport { Delete, Edit, Add, Clear } from '@material-ui/icons';\nimport { User } from '../../../models/User';\nimport { ENUMUserType } from '../../../enums/ENUMUserType';\nimport { UserService } from '../../../login/logic/user-service';\n\n\ninterface IEditPermissionsModalProps extends IBaseModalProps {\n    classes: ClassNameMap,\n}\ninterface IEditPermissionsModalState {\n    permissions: Permission[],\n    users: User[],\n    errorMessage: string,\n    selectedUser: User | null,\n    selectedPermissionType: ENUMPermissionType,\n    showErrorMessage: boolean\n}\n\nconst styles = (theme: Theme) => ({\n    paper: {\n        width: 400,\n        backgroundColor: theme.palette.background.paper,\n        border: '2px solid #000',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2, 4, 3),\n    },\n    errorPaper: {\n        backgroundColor: '#cb2431',\n        padding: theme.spacing(1),\n    }\n});\n\nclass EditPermissionsModal extends React.Component<IEditPermissionsModalProps, IEditPermissionsModalState> {\n    state: IEditPermissionsModalState = {\n        permissions: [],\n        users: [],\n        errorMessage: \"\",\n        selectedUser: { id: -1, name: '', userType: ENUMUserType.Normal },\n        selectedPermissionType: ENUMPermissionType.View,\n        showErrorMessage: false\n    }\n\n    getModalStyle = () => {\n\n        return {\n            top: `30%`,\n            left: `50%`,\n            transform: `translate(-50%, -50%)`,\n        };\n    }\n\n    getPermissions = async () => {\n        if (this.props.entity) {\n            const response = await PermissionsLogic.getPermissions(this.props.entity);\n\n            if (response.message) {\n                this.setState({ errorMessage: response.message, showErrorMessage: true });\n            } else if (response.data) {\n                this.setState({ permissions: response.data })\n                this.setState({ users: this.state.users.filter(this.userExistsInPermissions(response.data)) })\n            }\n        }\n    }\n\n    getUsers = async () => {\n        const response = await PermissionsLogic.getUsers();\n\n        if (response.message) {\n            this.setState({ errorMessage: response.message, showErrorMessage: true });\n        } else if (response.data) {\n            this.setState({ users: response.data.filter(this.userExistsInPermissions(this.state.permissions)) })\n        }\n    }\n\n    userExistsInPermissions = (permissions: Permission[]) => (user: User) => {\n        return (!permissions || permissions.findIndex(permission => permission.user.id === user.id) < 0)\n            && user.id !== UserService.getCurrentUser()?.id\n    }\n\n    permissionTypeText = {\n        [ENUMPermissionType.Edit]: 'Edit',\n        [ENUMPermissionType.View]: 'View'\n    }\n\n    componentDidMount() {\n        this.getPermissions();\n        this.getUsers();\n    }\n\n    handleUserChange = (event: any) => {\n        const user = this.state.users.find(user => user.id === event.target.value) || null;\n        this.setState({ selectedUser: user })\n    }\n    handlePermChange = (event: any) => {\n        this.setState({ selectedPermissionType: event.target.value })\n    }\n\n    handleDelete = (permission: Permission) => async (event: any) => {\n        const message = await PermissionsLogic.DeletePermission(permission)\n\n        if (message) {\n            this.setState({ errorMessage: message, showErrorMessage: true });\n        } else {\n            this.getPermissions();\n        }\n    }\n\n    handleEdit = (permission: Permission) => async (event: any) => {\n        const message = await PermissionsLogic.EditPermission(permission)\n\n        if (message) {\n            this.setState({ errorMessage: message, showErrorMessage: true });\n        } else {\n            this.getPermissions();\n        }\n    }\n\n    handleAdd = async (event: any) => {\n        if (this.props.entity && this.state.selectedUser && this.state.selectedUser.id != -1) {\n            const message = await PermissionsLogic.AddPermission(this.state.selectedUser, this.props.entity, this.state.selectedPermissionType);\n\n            if (message) {\n                this.setState({ errorMessage: message, showErrorMessage: true });\n            } else {\n                this.getPermissions();\n            }\n        }\n    }\n\n    handleClickCloseError = () => {\n        this.setState({ ...this.state, showErrorMessage: false, errorMessage: '' })\n    }\n\n    render() {\n        const { entity, classes } = this.props;\n        const { permissions, selectedUser, selectedPermissionType, users, showErrorMessage, errorMessage } = this.state;\n\n        return (\n            <div style={{ ...(this.getModalStyle()), position: 'absolute' }}>\n                {showErrorMessage &&\n                    <Paper className={classes.errorPaper}>\n                        <Typography variant=\"body2\" className={classes.errorText}>{errorMessage}\n                            <IconButton\n                                onClick={this.handleClickCloseError}\n                                aria-label=\"close error message\"\n                                edge=\"end\"\n                            >\n                                <Clear />\n                            </IconButton>\n                        </Typography>\n                    </Paper>\n                }\n                <TableContainer component={Paper}>\n                    <Table className={classes.table} aria-label=\"simple table\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Username</TableCell>\n                                <TableCell >Permission</TableCell>\n                                <TableCell >Delete</TableCell>\n                                <TableCell >Toggle Edit/View</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {permissions && permissions.map((row) => (\n                                <TableRow key={row.id}>\n                                    <TableCell component=\"th\" scope=\"row\">\n                                        {row.user.name}\n                                    </TableCell>\n                                    <TableCell >{this.permissionTypeText[row.permissionType]}</TableCell>\n                                    <TableCell >\n                                        <IconButton color=\"primary\" aria-label=\"delete\" component=\"span\">\n                                            <Delete onClick={this.handleDelete(row)} />\n                                        </IconButton>\n                                    </TableCell>\n                                    <TableCell >\n                                        <IconButton color=\"primary\" aria-label=\"edit\" component=\"span\">\n                                            <Edit onClick={this.handleEdit(row)} />\n                                        </IconButton>\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                            {selectedUser && <TableRow>\n                                <TableCell>\n                                    <Select\n                                        labelId=\"userselect\"\n                                        id=\"userselect\"\n                                        value={selectedUser.id}\n                                        onChange={this.handleUserChange}\n                                    >\n                                        {users && users.map(user => (\n                                            <MenuItem value={user.id}>\n                                                <em>{user.name}</em>\n                                            </MenuItem>\n                                        ))}\n                                    </Select>\n                                </TableCell>\n                                <TableCell>\n                                    <Select labelId=\"permselect\"\n                                        id=\"permselect\"\n                                        value={selectedPermissionType}\n                                        onChange={this.handlePermChange}>\n                                        <MenuItem value={ENUMPermissionType.View}>\n                                            {this.permissionTypeText[ENUMPermissionType.View]}\n                                        </MenuItem>\n                                        <MenuItem value={ENUMPermissionType.Edit}>\n                                            {this.permissionTypeText[ENUMPermissionType.Edit]}\n                                        </MenuItem>\n                                    </Select>\n                                </TableCell>\n                                <TableCell>\n                                    <IconButton color=\"primary\" aria-label=\"add\" component=\"span\">\n                                        <Add onClick={this.handleAdd} />\n                                    </IconButton>\n                                </TableCell>\n                            </TableRow>\n                            }\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </ div>\n        )\n    }\n}\n\nexport default withStyles(styles, { withTheme: true })(EditPermissionsModal)\n","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/components/modals/DeleteEntityModal.tsx",["171"],"import React from \"react\";\nimport { deleteTreeEntity } from \"../../api/tree-api\";\nimport { ITreeEntity } from \"../../interfaces/ITreeEntity\";\nimport { IBaseModalProps } from \"../../interfaces/modal-interafaces\";\nimport ValidationPopUp from './ValidationPopUp'\n\nconst DeleteEntityModal = (props: IBaseModalProps) => {\n    const { closeModal, entity, setTree } = props;\n    const deleteEntityInTree = (treeLevel: ITreeEntity[], entityId: number) => {\n        const filteredLevel = treeLevel.filter(entity => entity.id != entityId)\n\n        if (filteredLevel.length !== treeLevel.length){            \n            return filteredLevel\n        } else {\n            treeLevel.forEach(treeEntity => \n                treeEntity.children = deleteEntityInTree(treeEntity.children, entityId))\n            return treeLevel\n        }\n    }\n    const onDelete = () => {\n        const entityIdToDelete = (entity as ITreeEntity).id\n        deleteTreeEntity(entityIdToDelete)\n        setTree && setTree((prev: ITreeEntity[] | null) => {\n            deleteEntityInTree(prev as ITreeEntity[], (entity as ITreeEntity).id)\n            return prev as ITreeEntity[]\n        })\n        closeModal()\n    }\n    return <ValidationPopUp onClose={closeModal} onClick={onDelete} />\n}\n\nexport default DeleteEntityModal","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/components/modals/DetailsModal.tsx",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/components/CurrentTreeEntity.tsx",["172"],"import React, { useState } from 'react';\nimport { withStyles, Theme } from '@material-ui/core/styles';\nimport { ITreeEntity } from '../interfaces/ITreeEntity';\nimport { Grid, Typography } from '@material-ui/core';\nimport { Description, Folder } from '@material-ui/icons';\nimport AddTreeEntity from './AddTreeEntity';\nimport { TreeContextMenuTrigger } from './contextMenu/TreeContextMenuTrigger';\nimport { IOpenModalParams } from '../interfaces/modal-interafaces';\nimport { ENUMConverterType } from '../../enums/ENUMConverterType';\n\ninterface ICurrentTreeEntityProps {\n    entity?: ITreeEntity,\n    onAddFile: (file: File) => void,\n    onAddFolder: (folderName: string) => void\n    openModal: (params: IOpenModalParams) => void,\n    handleDuplicate: (entity: ITreeEntity) => void,\n    download: (entity: ITreeEntity) => void,\n    handleConvert: (entity: ITreeEntity, conversionType: ENUMConverterType) => void\n}\n\nconst styles = (theme: Theme) => ({\n\n});\n\nconst CurrentTreeEntity = (props: ICurrentTreeEntityProps) => {\n\n    const { entity, onAddFile, onAddFolder, openModal, handleDuplicate, handleConvert, download } = props\n\n    const collect = (props: any) => {\n        return props\n    }\n\n\n    return (\n        <Grid container justify={\"space-around\"}>\n            {entity && entity.children ? entity.children.map(child => {\n                return (\n                    <TreeContextMenuTrigger id=\"context-menu\" collect={collect} entity={child} handleDuplicate={handleDuplicate} handleConvert={handleConvert} download={download} openModal={openModal}>\n                        <Grid item xs={3} key={child.id}>\n                            {\n                                child.file ? <Description /> : <Folder />\n                            }\n                            <Typography>{child.name}</Typography>\n                        </Grid>\n                    </TreeContextMenuTrigger>\n                )\n            }) : undefined}\n            {\n                entity ?\n                    <Grid item xs={3}>\n                        <AddTreeEntity onAddFolder={onAddFolder} onAddFile={onAddFile} />\n                    </Grid> : undefined\n            }\n        </Grid>\n    )\n}\n\nexport default withStyles(styles, { withTheme: true })(CurrentTreeEntity);\n","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/components/contextMenu/TreeContextMenu.tsx",["173","174","175"],"import { ContextMenu, MenuItem, connectMenu, ConnectMenuProps } from \"react-contextmenu\";\nimport React from 'react';\nimport { Theme, withStyles } from \"@material-ui/core\";\nimport { UserService } from \"../../../login/logic/user-service\";\nimport { ENUMModalType } from '../../../enums/ENUMModalType';\nimport { IOpenModalParams } from \"../../interfaces/modal-interafaces\";\nimport './cotext.css'\nimport { ITreeEntity } from \"../../interfaces/ITreeEntity\";\nimport { duplicateFile } from \"../../api/tree-api\";\nimport { ConversionLogic } from \"../../logic/conversion-logic\";\nimport { ENUMConverterType } from \"../../../enums/ENUMConverterType\";\n\ninterface ITreeContextMenuState { }\n\nconst styles = (theme: Theme) => ({\n\n});\n\n\nclass ConnectedMenu extends React.Component<ConnectMenuProps, ITreeContextMenuState> {\n    handleClick = (event: any, data: IOpenModalParams) => {\n        this.props.trigger.openModal(data);\n    }\n\n    handleDuplicate = (event: any, data: { entity: ITreeEntity }) => {\n        this.props.trigger.handleDuplicate(data.entity);\n    }\n\n    handleDownload = (event: any, data: {entity: ITreeEntity}) => {\n        this.props.trigger.download(data.entity)\n    }\n\n    convertFile = (event: any, data: { entity: ITreeEntity, conversionType: ENUMConverterType }) => {\n        this.props.trigger.handleConvert(data.entity, data.conversionType);\n    }\n\n    canConvert = (conversionType: ENUMConverterType, fileName: string) => {\n        const conversionTypes = ConversionLogic.getAvailableConversionTypes(fileName);\n\n        return conversionTypes.indexOf(conversionType) !== -1;\n    }\n\n    render() {\n        const { trigger } = this.props;\n        const user = UserService.getCurrentUser();\n\n        return (\n            <ContextMenu id=\"context-menu\">\n                {trigger && user && trigger.entity?.owner?.id === user.id &&\n                <>\n                    < MenuItem data={{ entity: trigger.entity, modalType: ENUMModalType.EditPermissions }} onClick={this.handleClick}>\n                        Edit Permissions\n                    </MenuItem>\n                    < MenuItem data={{ entity: trigger.entity, modalType: ENUMModalType.Delete }} onClick={this.handleClick}>\n                    Delete\n                </MenuItem>\n                < MenuItem data={{ entity: trigger.entity, modalType: ENUMModalType.Rename }} onClick={this.handleClick}>\n                    Rename\n                </MenuItem>\n                </>\n                }\n                {trigger && trigger.entity &&\n                    < MenuItem data={{ entity: trigger.entity, modalType: ENUMModalType.Details }} onClick={this.handleClick}>\n                        Details\n                    </MenuItem>\n                }\n                {trigger && trigger.entity && trigger.entity.file &&\n                    < MenuItem data={{ entity: trigger.entity }} onClick={this.handleDuplicate}>\n                        Duplicate\n                    </MenuItem>\n                }\n                {trigger && trigger.entity && trigger.entity.file &&\n                    < MenuItem data={{ entity: trigger.entity }} onClick={this.handleDownload}>\n                        Download\n                    </MenuItem>\n                }\n                {trigger && trigger.entity && trigger.entity.file && this.canConvert(ENUMConverterType.JPGToPNG, trigger.entity.name) &&\n                    < MenuItem data={{ entity: trigger.entity, conversionType: ENUMConverterType.JPGToPNG }} onClick={this.convertFile}>\n                        Convert To PNG\n                    </MenuItem>\n                }\n                {trigger && trigger.entity && trigger.entity.file && this.canConvert(ENUMConverterType.PNGToJPG, trigger.entity.name) &&\n                    < MenuItem data={{ entity: trigger.entity, conversionType: ENUMConverterType.PNGToJPG }} onClick={this.convertFile}>\n                        Convert To JPG\n                    </MenuItem>\n                }\n            </ContextMenu>\n        )\n    }\n}\n\nconst TreeContextMenu = connectMenu(\"context-menu\")(ConnectedMenu);\n\n\nexport default TreeContextMenu\n","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/login/api/login-api.ts",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/appConfig.ts",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/enums/ENUMUserType.ts",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/enums/ENUMConverterType.ts",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/enums/ENUMPermissionType.ts",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/utils/api/axios-request.ts",["176","177"],"import { ENUMExceptionCodes } from '../../enums/ENUMExceptionCodes';\nimport { IResponse } from './interfaces/response-interfaces';\nimport { Logger } from '../log/logger';\nimport { IDeleteRequestParams, IGetRequestParams, IPostRequestParams } from './interfaces/request-params-interfaces';\nimport axios from 'axios'\n\nconst defaultHeaders = {\n    \"Access-Control-Allow-Credentials\": \"*\",\n    \"Content-Type\": \"application/json\"\n}\n\naxios.defaults.withCredentials = true;\n\n\n\nexport class AxiosRequest {\n    private constructor() { }\n\n    public static async get<TUrlParams, TResponseData>({ url, urlParams }: IGetRequestParams<TUrlParams>) {\n        let responseData: IResponse<TResponseData> = {\n            data: null,\n            exception: { message: \"Error in get request\", exceptionCode: ENUMExceptionCodes.RequestError }\n        }\n\n        try {\n            const response = await axios.get(url, { params: urlParams, headers: defaultHeaders });\n\n            if (response.status === 200) {\n                responseData = response.data;\n            } else {\n                Logger.error(`get request failed - url: ${url}`, new Error(`Bad response - status: ${response.status} ${response.statusText}`))\n            }\n        } catch (ex) {\n            Logger.error(`get request failed - url: ${url}`, ex);\n        }\n\n        return responseData;\n    }\n\n    public static async post<TUrlParams, TData, TResponseData>({ url, urlParams, data, headers }: IPostRequestParams<TUrlParams, TData>) {\n        let responseData: IResponse<TResponseData> = {\n            data: null,\n            exception: { message: \"Error in post request\", exceptionCode: ENUMExceptionCodes.RequestError }\n        }\n\n        try {\n            const response = await axios.post(url, data, { params: urlParams, headers: headers ? {...defaultHeaders, ...headers} : defaultHeaders });\n\n            if (response.status === 200) {\n                responseData = response.data;\n            } else {\n                Logger.error(`post request failed - url: ${url}`, new Error(`Bad response - status: ${response.status} ${response.statusText}`))\n            }\n        } catch (ex) {\n            Logger.error(`post request failed - url: ${url}`, ex);\n        }\n\n        return responseData;\n    }\n\n    public static async delete<TUrlParams, TData, TResponseData>({ url, id, headers }: IDeleteRequestParams) {\n        let responseData: IResponse<TResponseData> = {\n            data: null,\n            exception: { message: \"Error in delete request\", exceptionCode: ENUMExceptionCodes.RequestError }\n        }\n\n        try {\n            const response = await axios.delete(`${url}/${id}`, {\n                headers: headers ? {...defaultHeaders, ...headers} : defaultHeaders  });\n\n            if (response.status === 200) {\n                responseData = response.data;\n            } else {\n                Logger.error(`delete request failed - url: ${url}`, new Error(`Bad response - status: ${response.status} ${response.statusText}`))\n            }\n        } catch (ex) {\n            Logger.error(`delete request failed - url: ${url}`, ex);\n        }\n\n        return responseData;\n    }\n}\n","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/components/contextMenu/TreeContextMenuTrigger.tsx",["178"],"import TreeContextMenu from \"./TreeContextMenu\";\nimport { ContextMenuTrigger } from \"react-contextmenu\";\nimport React from 'react';\n\n\nexport const TreeContextMenuTrigger = (props: any) => {\n    return React.createElement(ContextMenuTrigger, props)\n} ","/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/components/AddTreeEntity.tsx",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/components/modals/ValidationPopUp.tsx",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/logic/permissions-logic.ts",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/api/permissions-api.ts",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/utils/log/logger.ts",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/logic/permissions-error-messages.ts",[],"/Users/korenzerah/Projects/FileDrive/file-drive-client/src/files-tree/helpers/file-helpers.ts",[],{"ruleId":"179","severity":1,"message":"180","line":7,"column":10,"nodeType":"181","messageId":"182","endLine":7,"endColumn":21},{"ruleId":"183","replacedBy":"184"},{"ruleId":"185","replacedBy":"186"},{"ruleId":"187","severity":1,"message":"188","line":108,"column":29,"nodeType":"189","endLine":108,"endColumn":72},{"ruleId":"179","severity":1,"message":"190","line":1,"column":10,"nodeType":"181","messageId":"182","endLine":1,"endColumn":32},{"ruleId":"179","severity":1,"message":"191","line":2,"column":10,"nodeType":"181","messageId":"182","endLine":2,"endColumn":28},{"ruleId":"192","severity":1,"message":"193","line":3,"column":47,"nodeType":"194","messageId":"195","endLine":3,"endColumn":48,"suggestions":"196"},{"ruleId":"179","severity":1,"message":"197","line":5,"column":10,"nodeType":"181","messageId":"182","endLine":5,"endColumn":21},{"ruleId":"198","severity":1,"message":"199","line":127,"column":88,"nodeType":"200","messageId":"201","endLine":127,"endColumn":90},{"ruleId":"179","severity":1,"message":"202","line":143,"column":17,"nodeType":"181","messageId":"182","endLine":143,"endColumn":23},{"ruleId":"198","severity":1,"message":"199","line":10,"column":68,"nodeType":"200","messageId":"201","endLine":10,"endColumn":70},{"ruleId":"179","severity":1,"message":"203","line":1,"column":17,"nodeType":"181","messageId":"182","endLine":1,"endColumn":25},{"ruleId":"179","severity":1,"message":"204","line":3,"column":17,"nodeType":"181","messageId":"182","endLine":3,"endColumn":27},{"ruleId":"179","severity":1,"message":"205","line":9,"column":10,"nodeType":"181","messageId":"182","endLine":9,"endColumn":23},{"ruleId":"179","severity":1,"message":"206","line":15,"column":7,"nodeType":"181","messageId":"182","endLine":15,"endColumn":13},{"ruleId":"179","severity":1,"message":"207","line":61,"column":32,"nodeType":"181","messageId":"182","endLine":61,"endColumn":42},{"ruleId":"179","severity":1,"message":"208","line":61,"column":44,"nodeType":"181","messageId":"182","endLine":61,"endColumn":49},{"ruleId":"179","severity":1,"message":"209","line":1,"column":8,"nodeType":"181","messageId":"182","endLine":1,"endColumn":23},"@typescript-eslint/no-unused-vars","'UserService' is defined but never used.","Identifier","unusedVar","no-native-reassign",["210"],"no-negated-in-lhs",["211"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'ConversionErrorMessage' is defined but never used.","'ENUMExceptionCodes' is defined but never used.","no-useless-escape","Unnecessary escape character: \\p.","Literal","unnecessaryEscape",["212","213"],"'ITreeEntity' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'entity' is assigned a value but never used.","'useState' is defined but never used.","'withStyles' is defined but never used.","'duplicateFile' is defined but never used.","'styles' is assigned a value but never used.","'TUrlParams' is defined but never used.","'TData' is defined but never used.","'TreeContextMenu' is defined but never used.","no-global-assign","no-unsafe-negation",{"messageId":"214","fix":"215","desc":"216"},{"messageId":"217","fix":"218","desc":"219"},"removeEscape",{"range":"220","text":"221"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"222","text":"223"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[134,135],"",[134,134],"\\"]